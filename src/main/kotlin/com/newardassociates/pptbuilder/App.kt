/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.newardassociates.pptbuilder

import com.newardassociates.pptbuilder.pptx.PPTXProcessor
import kotlinx.cli.*
import java.io.File
import java.io.FileInputStream
import java.util.*

fun main(args: Array<String>) {
    println("pptbuilder v0.9")
    println("---------------")
    val cliParser = ArgParser("pptbuilder")

    val input by cliParser.argument(ArgType.String, description = "Input file")
    val output by cliParser.argument(ArgType.String, description = "Output file name").optional()

    val baseDirectory by cliParser.option(ArgType.String,
            fullName = "workingDir", shortName = "wd",
            description = "Working directory").default("")
    val outputDir by cliParser.option(ArgType.String, fullName = "outputDir", shortName = "d",
            description = "Output directory into which to place the generated file").default("")

    val verbosity by cliParser.option(ArgType.Choice(listOf("quiet", "info", "debug")),
            fullName = "verbosity", shortName = "v",
            description = "How much logging to display").default("info")
    val format by cliParser.option(ArgType.Choice(listOf("pptx")),
            fullName = "format", shortName = "f",
            description = "Output format to use").default("pptx")
    val template by cliParser.option(ArgType.String,
            fullName = "template", shortName = "t",
            description = "The processing template file to use to start from (pptx only)")

    cliParser.parse(args)

    val properties = Properties()
    val propertiesFile = "${System.getProperty("user.home")}/.pptbuilder.properties"
    if (File(propertiesFile).exists())
        properties.load(FileInputStream(propertiesFile))
    println("Using properties from ${propertiesFile}: $properties")

    val outputFile = (if (output != null) output.toString() else input.toString().substringBeforeLast('.'))
    //val templateFile = (if (template != null) template.toString() else properties.getProperty("templateFile"))

    println("Parsing ${input.toString()} to ${outputFile}...")
    //println("Parsing ${input.toString()} to ${outputFile} ${if (templateFile != null) "using ${templateFile}..." else ""}...")

    val processorOptions = Processor.Options(outputFilename = outputFile);
    //if (templateFile != null)
    //    processorOptions.templateFile = templateFile

    val processor = when (format) {
        //"ast" -> ASTProcessor(processorOptions)
        //"nop" -> NOPProcessor(processorOptions)  // just for verifying input, don't generate output
        //"text" -> TextProcessor(processorOptions)
        "pptx" -> PPTXProcessor(processorOptions)
        else -> throw IllegalArgumentException("Unrecognized format: " + format.toString())
    }
    val parser = Parser(properties)

    processor.process(parser.parse(File(input.toString())))
}
