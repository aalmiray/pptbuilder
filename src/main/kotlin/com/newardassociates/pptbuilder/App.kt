/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.newardassociates.pptbuilder

import kotlinx.cli.*
import java.io.File
import java.io.FileInputStream
import java.io.FileOutputStream
import java.io.FileWriter
import java.util.*

class App(val parser : Parser, val processor : Processor) {
    fun run(file : File) {
        val preso = parser.parse(file)
        processor.process(preso)
    }
}

fun main(args: Array<String>) {
    val properties = Properties()
    val propertiesFile = System.getProperty("user.home") + "/.pptbuilder.properties"
    if (File(propertiesFile).exists())
        properties.load(FileInputStream(propertiesFile))
    println("Using properties from ${propertiesFile}: ${properties}")

    val cliParser = ArgParser("pptbuilder")
    //val input by cliParser.argument(ArgType.String, description = "Input file")
    val output by cliParser.argument(ArgType.String, description = "Output file name").optional()
    val format by cliParser.option(ArgType.Choice(listOf("pptx", "ast", "text")),
            fullName = "format", shortName = "f",
            description = "Output format to use").default("pptx")
    val template by cliParser.option(ArgType.String, fullName = "template", shortName = "t",
            description = "The processing template file to use to start from (pptx only)")
    val debug by cliParser.option(ArgType.Boolean, fullName = "debug", shortName = "d",
            description="Turn on debug/verbose mode").default(false)

    cliParser.parse(args)

    val inputFile = "./slidesamples/xmlmd/Testing.xmlmd" //input.toString()
    val outputFile = (if (output != null) output.toString() else inputFile.substringBeforeLast('.'))

    println("Parsing ${inputFile} to ${outputFile}...")

    val processorOptions = Processor.Options(outputFilename = outputFile!!)
    val processor = when (format.toString()) {
        "ast" -> ASTProcessor(processorOptions)
        "text" -> TextProcessor(processorOptions)
        "pptx" -> PPTXProcessor(processorOptions)
        else -> throw IllegalArgumentException("Unrecognized format: " + format.toString())
    }

    val app = App(Parser(properties), processor)
    app.run(File(inputFile))
}
