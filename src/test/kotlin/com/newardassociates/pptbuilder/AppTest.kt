/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.newardassociates.pptbuilder

import com.vladsch.flexmark.html.HtmlRenderer
import com.vladsch.flexmark.parser.Parser
import com.vladsch.flexmark.util.ast.Node
import com.vladsch.flexmark.util.data.MutableDataSet
import java.awt.Color
import java.io.File
import kotlin.test.Test
import kotlin.test.assertNotNull
import org.apache.poi.xslf.usermodel.XMLSlideShow
import org.w3c.dom.NodeList
import java.io.FileInputStream
import java.io.FileOutputStream
import javax.xml.*
import javax.xml.parsers.*
import javax.xml.xpath.*
import javax.xml.validation.*
import kotlin.test.assertEquals
import kotlin.test.assertTrue

class AppTest {
    @Test fun flexmarkMarkdownParse() {
        val options = MutableDataSet()

        //options.set(HtmlRenderer.SOFT_BREAK, "<br />\n");
        val parser: Parser = Parser.builder(options).build()
        val document: Node = parser.parse("This is *Sparta*")

        /*
        System.out.println(document)
        for (child in document.children) {
            println(child)
            for (grandchild in child.children) {
                println(grandchild)
            }
        }
         */

        val renderer: HtmlRenderer = HtmlRenderer.builder(options).build()
        val html: String = renderer.render(document) // "<p>This is <em>Sparta</em></p>\n"
        assertNotNull(html, "<p>This is <em>Sparta</em></p>\\n")
    }

    @Test fun xmlTest() {
        // Important note about XInclude: "The namespace for XInclude
        // was changed back to http://www.w3.org/2001/XInclude in the
        // Candidate Recommendation (April 2004). The
        // http://www.w3.org/2003/XInclude namespace is no longer
        // recognized." --https://xerces.apache.org/xerces2-j/faq-xinclude.html

        val factory = DocumentBuilderFactory.newInstance()
        factory.isNamespaceAware = true
        factory.isXIncludeAware = true
        val builder = factory.newDocumentBuilder()
        val doc = builder.parse(File("./src/test/resources/xmltest.xml"))

        assertTrue(doc.documentElement.getElementsByTagName("included").length > 0)

        // Try it with XPath
        val xpath = XPathFactory.newInstance().newXPath()
        val nodeList = xpath.compile("/presentation/body/included").evaluate(doc, XPathConstants.NODESET)
        assertTrue((nodeList as NodeList).length > 0)
    }

    @Test fun apachePOITest() {
        // Does the test PPTX exist already?
        val apachePOITestFile = "./build/test-results/test/apachePOITest.pptx"
        val ppt =
                if (File(apachePOITestFile).exists()) { XMLSlideShow(FileInputStream(apachePOITestFile)) }
                else { XMLSlideShow() }

        val slide = ppt.createSlide()
        val shape = slide.createTextBox()
        val p = shape.addNewTextParagraph()
        val r1 = p.addNewTextRun()
        r1.setText("apachePOITest")
        r1.fontSize = 24.0
        r1.isItalic = true
        r1.setFontColor(Color.BLUE)

        assertEquals("apachePOITest", r1.rawText)

        ppt.write(FileOutputStream(apachePOITestFile))
                // for some reason, the slide isn't having text in it
                // and I don't know why, but leave that for now
    }
}
