/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.newardassociates.pptbuilder

import com.vladsch.flexmark.ast.FencedCodeBlock
import com.vladsch.flexmark.ast.IndentedCodeBlock
import com.vladsch.flexmark.ext.attributes.AttributesExtension
import com.vladsch.flexmark.html.HtmlRenderer
import com.vladsch.flexmark.parser.Parser
import com.vladsch.flexmark.util.ast.Node
import com.vladsch.flexmark.util.data.MutableDataSet
import com.vladsch.flexmark.util.misc.Extension
import org.apache.poi.xslf.usermodel.SlideLayout
import java.awt.Color
import java.io.File
import kotlin.test.Test
import kotlin.test.assertNotNull
import org.apache.poi.xslf.usermodel.XMLSlideShow
import org.w3c.dom.NodeList
import java.io.FileInputStream
import java.io.FileOutputStream
import java.util.*
import javax.xml.*
import javax.xml.parsers.*
import javax.xml.xpath.*
import javax.xml.validation.*
import kotlin.test.assertEquals
import kotlin.test.assertTrue

class AppTest {
    @Test fun flexmarkMarkdownParse() {
        val options = MutableDataSet()

        //options.set(HtmlRenderer.SOFT_BREAK, "<br />\n");
        val parser: Parser = Parser.builder(options).build()
        val document: Node = parser.parse("This is *Sparta*")

        /*
        System.out.println(document)
        for (child in document.children) {
            println(child)
            for (grandchild in child.children) {
                println(grandchild)
            }
        }
         */

        val renderer: HtmlRenderer = HtmlRenderer.builder(options).build()
        val html: String = renderer.render(document) // "<p>This is <em>Sparta</em></p>\n"
        assertNotNull(html, "<p>This is <em>Sparta</em></p>\\n")
    }

    @Test fun markdownCodeBlockTest() {
        val options = MutableDataSet()
        /*
        // This appears to have no effect on getting attributes to attach to the
        // FencedCodeBlock and I have no idea why
        options.set(Parser.EXTENSIONS, Arrays.asList(
                AttributesExtension.create()
        ) as Collection<Extension>)
         */

        //options.set(HtmlRenderer.SOFT_BREAK, "<br />\n");
        val parser: Parser = Parser.builder(options).build()
        val input = """
            There is a method called `doSomething` and it looks like this:
            ```
            cout << "I did something!" << endl;
            ```
            
            There is another method, called `doSomethingElse` and it looks like:
            
                    cout << "I did something different" << endl;

            Now I would like some code with a language attached: {title="Title"}
            
            ```javascript{src=./code/console.js}
            ```

            Let's show off some embedded code:
            ``` {language=javascript}
            console.log("This code is in the XMLMD file")
            ```
    
            Here is some imported code from `console.js`:
            ``` {language=javascript src=Content/code/console.js}
            ```

            And now our slide is complete.
        """.trimIndent()
        val document: Node = parser.parse(input)

        for (child in document.children) {
            println("\t" + child)
            if (child is IndentedCodeBlock) {
                println("ICBCODE: " + child.contentChars)
            }
            if (child is FencedCodeBlock) {
                println("FCBCODE: " + child.contentChars)
                println("  attributes: ${child.attributes.base}")
                println("  info: ${child.info}")
            }
            for (grandchild in child.children) {
                println("\t\t" + grandchild)
                for (ggchild in grandchild.children) {
                    println("\t\t\t" + ggchild)
                }
            }
        }
        println("End of document")
    }

    @Test fun xmlTest() {
        // Important note about XInclude: "The namespace for XInclude
        // was changed back to http://www.w3.org/2001/XInclude in the
        // Candidate Recommendation (April 2004). The
        // http://www.w3.org/2003/XInclude namespace is no longer
        // recognized." --https://xerces.apache.org/xerces2-j/faq-xinclude.html

        val factory = DocumentBuilderFactory.newInstance()
        factory.isNamespaceAware = true
        factory.isXIncludeAware = true
        val builder = factory.newDocumentBuilder()
        val doc = builder.parse(File("./src/test/resources/xmltest.xml"))

        assertTrue(doc.documentElement.getElementsByTagName("included").length > 0)

        // Try it with XPath
        val xpath = XPathFactory.newInstance().newXPath()
        val nodeList = xpath.compile("/presentation/body/included").evaluate(doc, XPathConstants.NODESET)
        assertTrue((nodeList as NodeList).length > 0)
    }

    @Test fun apachePOITest() {
        // Does the test PPTX exist already?
        val apachePOITestFile = "./build/test-results/test/apachePOITest.pptx"
        val ppt =
                if (File(apachePOITestFile).exists()) { XMLSlideShow(FileInputStream(apachePOITestFile)) }
                else { XMLSlideShow() }

        for (master in ppt.slideMasters) {
            println("Iterating through layouts in master ${master}")
            for (layout in master.slideLayouts) {
                println("Discovering layout ${layout.name}")
            }
        }

        val slide = ppt.createSlide(ppt.findLayout("Title and Content"))
        for (pl in slide.placeholders) {
            println("Placeholder: ${pl}")
        }

        val content = slide.placeholders[1]
        content.clearText()
        content.text = "apachePOITest"

        val para = content.addNewTextParagraph()
        val run = para.addNewTextRun()
        run.fontSize = 24.0
        run.isBold = true
        run.setText("First run")

        val run2 = para.addNewTextRun()
        run2.fontFamily = "Courier New"
        run2.setText("Second run")

        val run3 = para.addNewTextRun()
        run3.fontFamily = "Consolas"
        run3.fontSize = 20.0
        run3.isItalic = true
        run3.setText("Third run")

        /*
        val shape = slide.createTextBox()
        val p = shape.addNewTextParagraph()
        val r1 = p.addNewTextRun()
        r1.fontSize = 24.0
        r1.isItalic = true
        r1.setFontColor(Color.BLUE)
        r1.setText("apachePOITest")
         */

        ppt.write(FileOutputStream(apachePOITestFile))
                // for some reason, the slide isn't having text in it
                // and I don't know why, but leave that for now
    }
}
