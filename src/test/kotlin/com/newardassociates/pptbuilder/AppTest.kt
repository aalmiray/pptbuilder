/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.newardassociates.pptbuilder

import com.vladsch.flexmark.html.HtmlRenderer
import com.vladsch.flexmark.parser.Parser
import com.vladsch.flexmark.util.ast.Node
import com.vladsch.flexmark.util.data.MutableDataSet
import java.awt.Color
import java.io.File
import kotlin.test.Test
import kotlin.test.assertNotNull
import org.apache.poi.xslf.usermodel.XMLSlideShow
import java.io.FileInputStream
import java.io.FileOutputStream
import kotlin.test.assertEquals

class AppTest {
    @Test fun testAppHasAGreeting() {
        val classUnderTest = App()
        assertNotNull(classUnderTest.greeting, "app should have a greeting")
    }

    @Test fun flexmarkMarkdownParse() {
        val options = MutableDataSet()

        //options.set(HtmlRenderer.SOFT_BREAK, "<br />\n");
        val parser: Parser = Parser.builder(options).build()
        val renderer: HtmlRenderer = HtmlRenderer.builder(options).build()

        // You can re-use parser and renderer instances
        val document: Node = parser.parse("This is *Sparta*")
        val html: String = renderer.render(document) // "<p>This is <em>Sparta</em></p>\n"
        assertNotNull(html, "<p>This is <em>Sparta</em></p>\\n")
    }

    @Test fun xmlTest() {

    }

    @Test fun apachePOITest() {
        // Does the test PPTX exist already?
        val apachePOITestFile = "./build/test-results/test/apachePOITest.pptx"
        val ppt =
                if (File(apachePOITestFile).exists()) { XMLSlideShow(FileInputStream(apachePOITestFile)) }
                else { XMLSlideShow() }

        val slide = ppt.createSlide()
        val shape = slide.createTextBox()
        val p = shape.addNewTextParagraph()
        val r1 = p.addNewTextRun()
        r1.setText("apachePOITest")
        r1.fontSize = 24.0
        r1.isItalic = true
        r1.setFontColor(Color.BLUE)

        assertEquals("apachePOITest", r1.rawText)

        ppt.write(FileOutputStream(apachePOITestFile))
    }
}
